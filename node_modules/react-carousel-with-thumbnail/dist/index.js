"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _style = _interopRequireWildcard(require("./style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Child = function Child(props) {
  return _react["default"].createElement(_style.ChildrenWrapper, {
    width: "100%",
    heihgt: props.height,
    widthUnit: props.widthUnit,
    heightUnit: props.heightUnit,
    index: props.index,
    className: "slide-item ".concat(props.className),
    maskColor: props.maskColor
  }, props.children, props.mask ? _react["default"].createElement("div", {
    className: "carousel-mask"
  }) : "");
};

var Carousel = function Carousel(props) {
  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      arr = _useState2[0],
      setArr = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      length = _useState4[0],
      setLength = _useState4[1];

  var _useState5 = (0, _react.useState)(""),
      _useState6 = _slicedToArray(_useState5, 2),
      className = _useState6[0],
      setClassName = _useState6[1];

  var _useState7 = (0, _react.useState)(1),
      _useState8 = _slicedToArray(_useState7, 2),
      current = _useState8[0],
      setCurrent = _useState8[1];

  (0, _react.useEffect)(function () {
    var temp = [];
    props.children.map(function (e) {
      temp.push(e);
    });
    temp.unshift(temp[temp.length - 1]);
    temp.pop();
    setLength(temp.length);
    setArr(temp);
  }, []);
  (0, _react.useEffect)(function () {
    if (props.autoPlay) {
      var timer = setInterval(onNext, props.speed);
      return function () {
        clearInterval(timer);
      };
    }
  });

  var onNext = function onNext() {
    var n = current;

    if (current === arr.length) {
      n = 1;
    } else {
      n += 1;
    }

    setCurrent(n);
    var temp = arr;

    if (className === "") {
      setTimeout(function () {
        setClassName("move");
      }, 10);
      return;
    } else if (className !== "back") {
      setClassName("");
      temp.push(temp[0]);
      temp.shift();
    } else {
      temp.unshift(temp[temp.length - 1]);
      temp.pop();
    }

    setArr(temp);
    setTimeout(function () {
      setClassName("move");
    }, 10);
  };

  var onPrev = function onPrev() {
    var n = current;

    if (n === 1) {
      n = arr.length;
    } else {
      n -= 1;
    }

    setCurrent(n);
    var temp = arr;

    if (className === "") {
      setTimeout(function () {
        setClassName("back");
      }, 10);
      return;
    } else if (className !== "move") {
      setClassName("");
      temp.unshift(temp[arr.length - 1]);
      temp.pop();
    } else {
      temp.push(arr[0]);
      temp.shift();
    }

    setArr(temp);
    setTimeout(function () {
      setClassName("back");
    }, 10);
  };

  var onMove = function onMove(index, c) {
    var count = index - c;
    var temp = arr;

    if (count === 0) {
      return;
    } else if (count > 0) {
      for (var i = 1; i < count; i++) {
        temp.push(temp[0]);
        temp.shift();
      }

      onNext();
      setCurrent(index);
    } else if (count < 0) {
      for (var _i2 = -1; _i2 > count; _i2--) {
        temp.unshift(temp[arr.length - 1]);
        temp.pop();
      }

      onPrev();
      setCurrent(index);
    }

    setArr(temp);
  };

  return _react["default"].createElement(_style["default"], {
    width: props.width,
    height: props.height
  }, _react["default"].createElement(_style.CarouselWrapper, {
    width: props.width,
    height: props.height,
    thumbHeight: props.thumbHeight,
    margin: props.margin,
    length: length
  }, _react["default"].createElement("div", {
    className: "inner"
  }, arr.map(function (e, index) {
    return _react["default"].createElement(Child, {
      key: index,
      index: index,
      className: className,
      width: props.width,
      height: props.height,
      mask: props.mask,
      maskColor: props.maskColor
    }, e);
  })), _react["default"].createElement(_style.NavigationWrapper, {
    className: "navigation",
    navigationColor: props.navigationColor,
    navigationVisible: props.navigationVisible
  }, _react["default"].createElement("div", {
    className: "cal-navigation-item prev",
    onClick: onPrev
  }), _react["default"].createElement("div", {
    className: "cal-navigation-item next",
    onClick: onNext
  }))), _react["default"].createElement(_style.ThumbnailWrapper, {
    length: length,
    current: current,
    margin: props.margin,
    thumbHeight: props.thumbHeight,
    maskColor: props.maskColor
  }, props.children.map(function (e, index) {
    return _react["default"].createElement("div", {
      className: "thumb",
      key: index,
      onClick: function onClick() {
        return onMove(index + 1, current);
      }
    }, e, props.mask ? _react["default"].createElement("div", {
      className: "carousel-mask"
    }) : "");
  })));
};

Carousel.propTypes = {
  width: _propTypes["default"].string,
  heihgt: _propTypes["default"].string,
  margin: _propTypes["default"].string,
  thumbHeight: _propTypes["default"].string,
  navigationColor: _propTypes["default"].string,
  navigationVisible: _propTypes["default"].bool,
  mask: _propTypes["default"].bool,
  maskColor: _propTypes["default"].string,
  autoPlay: _propTypes["default"].bool,
  speed: _propTypes["default"].number,
  children: _propTypes["default"].any.isRequired
};
Carousel.defaultProps = {
  width: "100%",
  height: "100vh",
  margin: "5px",
  thumbHeight: "80px",
  navigationColor: "#fff",
  navigationVisible: true,
  mask: false,
  maskColor: "rgba(0,0,0,0.3)",
  autoPlay: true,
  speed: 5000
};
var _default = Carousel;
exports["default"] = _default;